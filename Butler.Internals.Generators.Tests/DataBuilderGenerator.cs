using Butler.Internals.Generators.Tests.CountFormatters;
using Butler.Internals.Generators.Tests.Mappers;

using Microsoft.CodeAnalysis;

namespace Butler.Internals.Generators.Tests
{
    [Generator]
    public sealed class DataBuilderGenerator : ISourceGenerator
    {
        IStringMapper<int> mapper;
        ICountFormatter parameters;
        ICountFormatter parameterNames;
        public void Initialize(GeneratorInitializationContext context)
        {
            mapper = new TupledMapper();
            int startIndex = 1;
            string parameterNameFormat = "obj{0}";
            string parametersPrefix = "object ";
            ICountFormatter nameFormatter = new ProvidedFormatter(parameterNameFormat);
            parameterNames = new EnumeratedFormatter(
                nameFormatter,
                startIndex);
            parameters = new EnumeratedFormatter(
                new PrefixFormatter(nameFormatter, parametersPrefix),
                startIndex);
        }
        public void Execute(GeneratorExecutionContext context)
        {
            for (int i = mapper.Start; i <= mapper.End; i++)
            {
                string classPrefix = mapper[i];
                string typeName = GetTypeName(classPrefix);
                string source = Template(typeName, parameters.GetFormatted(i), parameterNames.GetFormatted(i));
                context.AddSource($"{typeName}{FileInformation.CSharpFileEnding}", source);
            }
        }
        static string GetTypeName(string classPrefix)
            => $"{classPrefix}ParamsBuilder";
        static string Template(string typeName, string parameters, string parameterNames)
            => $@" // <auto-generated/>
using System.Collections;

namespace Butler.Internals.Tests.DataHelper;
public sealed class {typeName} : IDataBuilder, IEnumerable<object[]>
{{
    readonly List<object[]> objects = new();
    public void Add({parameters})
        => objects.Add(new object[] {{ {parameterNames} }});
    public IEnumerable<object[]> GetData()
        => objects;
    public IEnumerator<object[]> GetEnumerator()
        => objects.GetEnumerator();
    IEnumerator IEnumerable.GetEnumerator()
        => GetEnumerator();
}}
        ";
    }
}
