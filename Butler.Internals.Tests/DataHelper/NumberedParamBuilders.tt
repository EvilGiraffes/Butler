<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
<#
Dictionary<int, string> map = new()
{
	{ 2, "Two" },
	{ 3, "Three" },
	{ 4, "Four" },
	{ 5, "Five" }
};
int count = map.Count;
static string FormatRange(int index, string format)
{
	return string.Join(", ", Enumerable.Range(1, index + 1).Select(i => string.Format(format, i)));
}
static string GetParameters(int index)
{
	string format = "object obj{0}";
	return FormatRange(index, format);
}
static string GetParameterNames(int index)
{
	string format = "obj{0}";
	return FormatRange(index, format);
}
string GetName(int index)
{
	return map[index] + "ParamBuilder";
}
#>
// This is a generated file.
// Do not edit as it will be overwritten.

using System.Collections;
namespace Butler.Internals.Tests.DataHelper;
<#
for (int i = 2; i <= count + 1; i++)
{
string name = GetName(i);
string parameters = GetParameters(i);
string parameterNames = GetParameterNames(i);
#>

// Generated Class.
public sealed class <#=name#> : IDataBuilder, IEnumerable<object[]>
{
	readonly List<object[]> objects = new();
	public void Add(<#=parameters#>)
		=> objects.Add(new object[] { <#=parameterNames#> });
	public IEnumerable<object[]> GetData()
		=> objects;
	public IEnumerator<object[]> GetEnumerator()
		=> objects.GetEnumerator();
	IEnumerator IEnumerable.GetEnumerator()
		=> GetEnumerator();
}
<#
}
#>